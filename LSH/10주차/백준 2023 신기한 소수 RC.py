# 문제

# 수빈이가 세상에서 가장 좋아하는 것은 소수이고, 취미는 소수를 가지고 노는 것이다. 요즘 수빈이가 가장 관심있어 하는 소수는 7331이다.

# 7331은 소수인데, 신기하게도 733도 소수이고, 73도 소수이고, 7도 소수이다. 즉, 왼쪽부터 1자리, 2자리, 3자리, 4자리 수 모두 소수이다! 수빈이는 이런 숫자를 신기한 소수라고 이름 붙였다.

# 수빈이는 N자리의 숫자 중에서 어떤 수들이 신기한 소수인지 궁금해졌다. N이 주어졌을 때, 수빈이를 위해 N자리 신기한 소수를 모두 찾아보자.
# 입력

# 첫째 줄에 N(1 ≤ N ≤ 8)이 주어진다.
# 출력

# N자리 수 중에서 신기한 소수를 오름차순으로 정렬해서 한 줄에 하나씩 출력한다.

def is_prime(num):
    # 2보다 작은 수는 소수가 아님
    if num < 2:
        return False
    # 2부터 num의 제곱근까지의 모든 숫자로 num을 나누어 봄
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:    # 나누어 떨어지면 소수가 아님
            return False
    return True             # 모든 테스트를 통과하면 소수

# 신기한 소수를 찾는 재귀 함수
def dfs(n, num):
    # 주어진 자릿수만큼의 숫자를 생성했을 경우 출력
    if n == 0:
        print(num)
        return
    # 다음 자릿수의 숫자를 결정하기 위한 반복문
    for i in range(10):  # 0부터 9까지 시도
        next_num = num * 10 + i  # 다음 숫자 생성
        # 만들어진 수가 소수라면 재귀 호출
        if is_prime(next_num):
            dfs(n - 1, next_num)

# 입력: N 자리의 신기한 소수를 찾아야 함
N = int(input())

# 초기 시작 숫자는 1자리 소수인 2, 3, 5, 7
# 각 숫자를 시작으로 dfs 함수 호출
for i in [2, 3, 5, 7]:
    dfs(N-1, i)
