# ----------------------------------------------------------------------------------------------------------문제
# 괄호 문자열(Parenthesis String, PS)은 두 개의 괄호 기호인 ‘(’ 와 ‘)’ 만으로 구성되어 있는 문자열이다. 
# 그 중에서 괄호의 모양이 바르게 구성된 문자열을 올바른 괄호 문자열(Valid PS, VPS)이라고 부른다. 
# 한 쌍의 괄호 기호로 된 “( )” 문자열은 기본 VPS 이라고 부른다. 만일 x 가 VPS 라면 이것을 하나의 괄호에 넣은 새로운 문자열 “(x)”도 VPS 가 된다. 
# 그리고 두 VPS x 와 y를 접합(concatenation)시킨 새로운 문자열 xy도 VPS 가 된다. 
# 예를 들어 “(())()”와 “((()))” 는 VPS 이지만 “(()(”, “(())()))” , 그리고 “(()” 는 모두 VPS 가 아닌 문자열이다. 
# 여러분은 입력으로 주어진 괄호 문자열이 VPS 인지 아닌지를 판단해서 그 결과를 YES 와 NO 로 나타내어야 한다. 

# ------------------------------------------------------------------------------------------------------예제 입력
# 입력 데이터는 표준 입력을 사용한다. 입력은 T개의 테스트 데이터로 주어진다. 
# 입력의 첫 번째 줄에는 입력 데이터의 수를 나타내는 정수 T가 주어진다. 
# 각 테스트 데이터의 첫째 줄에는 괄호 문자열이 한 줄에 주어진다. 하나의 괄호 문자열의 길이는 2 이상 50 이하이다. 
'''
6
(())())
(((()())()
(()())((()))
((()()(()))(((())))()
()()()()(()()())()
(()((())()(
'''

# ------------------------------------------------------------------------------------------------------예제 출력
# 출력은 표준 출력을 사용한다. 
# 만일 입력 괄호 문자열이 올바른 괄호 문자열(VPS)이면 “YES”, 아니면 “NO”를 한 줄에 하나씩 차례대로 출력해야 한다. 
'''
NO
NO
YES
NO
YES
NO
'''

# --------------------------------------------------------------------------------------------------알고리즘 분류
# 자료 구조
# 문자열
# 스택

# ----------------------------------------------------------------------------------------------------------풀이

# 테스트 케이스 T 만큼 반복 
for T in range(int(input())):
    
    # 필요한 요소들
    VPS = list(input())     # 괄호 문자열을 리스트로 입력받음
    pair_identifier = []    # 페어를 이루는지 확인하기 위한 임시 리스트
    is_ok = True            # 조건이 만족 되었는지 확인하기 위한 boolean 자료

    '''
    입력받은 문자열 리스트의 요소를 앞에서 부터 확인
    만약 ( 가 확인되면 페어를 이루는지 확인하기 위해 pair_identifier 에 append
    만약 ) 가 확인되면, pair_identifier 가 비어있다면, 페어가 맞지 않으므로 조건 만족 실패, is_ok = False
    pair_identifier 에 ( 가 있다면, 페어가 되었으므로 pair_identifier 에서 ( 하나를 제거
    '''
    for i in VPS:
        if i == '(':
            pair_identifier.append(i)
        else:
            if pair_identifier == []:
                is_ok = False
            else:
                pair_identifier.pop()
    
    # 모든 문자열을 확인 후, 남은 ( 가 있다면, 페어가 맞지 않으므로 조건 만족 실패, is_ok = False
    if pair_identifier != []:
        is_ok = False
    
    # 문제에서 요구한 결과값 출력
    if is_ok == True:
        print("YES")
    else:
        print("NO")

# ------------------------------------------------------------------------------------------------------풀이 과정
# 자료 구조 중 스택의 개념을 몰라서 if 문으로 모든 조건을 검색해 보았음
# 그러나 이 방법은 가독성이 떨어졌을 뿐더러, 시간초과로 실패함

# 스택의 개념인 push, pop, top, is_empty 를 이용하면 문제를 쉽게 풀 수 있음