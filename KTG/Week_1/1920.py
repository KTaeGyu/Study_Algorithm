# ----------------------------------------------------------------------------------------------------------문제
# N개의 정수 A[1], A[2], …, A[N]이 주어져 있을 때, 이 안에 X라는 정수가 존재하는지 알아내는 프로그램을 작성하시오.

# ------------------------------------------------------------------------------------------------------예제 입력
# 첫째 줄에 자연수 N(1 ≤ N ≤ 100,000)이 주어진다. 
# 다음 줄에는 N개의 정수 A[1], A[2], …, A[N]이 주어진다. 
# 다음 줄에는 M(1 ≤ M ≤ 100,000)이 주어진다. 다음 줄에는 M개의 수들이 주어지는데, 이 수들이 A안에 존재하는지 알아내면 된다. 
# 모든 정수의 범위는 -231 보다 크거나 같고 231보다 작다.
'''
5
4 1 5 2 3
5
1 3 7 9 5
'''

# ------------------------------------------------------------------------------------------------------예제 출력
# M개의 줄에 답을 출력한다. 
# 존재하면 1을, 존재하지 않으면 0을 출력한다.
'''
1
1
0
0
1
'''

# --------------------------------------------------------------------------------------------------알고리즘 분류
# 자료 구조
# 정렬
# 이분 탐색

# ----------------------------------------------------------------------------------------------------------풀이
# 시간복잡도 개선용 리드라인
import sys
input = sys.stdin.readline

# 시간복잡도 개선용 이분탐색
def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            return 1
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return 0

# 입력값
N = int(input())
A = sorted(list(map(int, input().split())))
M = int(input())
nums = list(map(int, input().split()))

# nums 에 있는 num 이 A를 정렬시킨 후 에 있는지 없는지 이분 탐색으로 탐색
result = [binary_search(A, num) for num in nums]

# 출력 양식 맞춰 출력
print(*result, sep='\n')

# ------------------------------------------------------------------------------------------------------풀이 과정
# 이분탐색을 통해 시간복잡도 개선