# ----------------------------------------------------------------------------------------------------------문제
# 요세푸스 문제는 다음과 같다.

# 1번부터 N번까지 N명의 사람이 원을 이루면서 앉아있고, 양의 정수 K(≤ N)가 주어진다. 이제 순서대로 K번째 사람을 제거한다. 
# 한 사람이 제거되면 남은 사람들로 이루어진 원을 따라 이 과정을 계속해 나간다. 
# 이 과정은 N명의 사람이 모두 제거될 때까지 계속된다. 
# 원에서 사람들이 제거되는 순서를 (N, K)-요세푸스 순열이라고 한다. 
# 예를 들어 (7, 3)-요세푸스 순열은 <3, 6, 2, 7, 5, 1, 4>이다.

# N과 K가 주어지면 (N, K)-요세푸스 순열을 구하는 프로그램을 작성하시오.

# ------------------------------------------------------------------------------------------------------예제 입력
# 첫째 줄에 N과 K가 빈 칸을 사이에 두고 순서대로 주어진다. (1 ≤ K ≤ N ≤ 1,000)
# 7 3

# ------------------------------------------------------------------------------------------------------예제 출력
# 예제와 같이 요세푸스 순열을 출력한다.
# <3, 6, 2, 7, 5, 1, 4>

# --------------------------------------------------------------------------------------------------알고리즘 분류
# 구현
# 자료 구조
# 큐

# ----------------------------------------------------------------------------------------------------------풀이

# N, K를 입력받음
N, K = map(int, input().split())


# 아래 식에 필요한 요소들
my_lst = list(range(1, N+1))    # N 길이의 숫자 리스트
new_K = K                       # K 값을 식에 변형하며 사용하기 위해 new_K를 만듦
result_lst = []                 # 결과 값을 담을 리스트


# 요세푸스 문제의 결과를 출력하는 함수
while my_lst != []:
    '''
    리스트의 new_K 인덱스에 있는 숫자를 pop 하며 리스트가 빌 때까지 함수를 반복
    new_K 값이 인덱스를 넘지 않는 경우, 한 번 pop을 할 때마다 K-1 만큼 숫자를 더하여 다음 숫자를 pop 할 수 있도록 함
    new_K 값이 인덱스를 넘는 경우, new_K 에 len(my_lst) 만큼 빼서 Cycle 을 형성
    '''
    if new_K <= len(my_lst):
        poped_num = my_lst.pop(new_K-1)
        result_lst.append(str(poped_num))
        new_K += K-1
    elif new_K > len(my_lst):
        new_K -= len(my_lst)


# 문제에서 요구한 결과의 형태를 만들기 위한 부분 : '<result>'
result = '<{}>'.format(', '.join(result_lst))
print(result)


# ------------------------------------------------------------------------------------------------------풀이 과정
# 요세푸스 문제를 풀기 위해 회전 구조를 만들기 위한 방법을 고민해 보았음
# >>인덱스라는 요소를 활용하여 조건에 따라 인덱스가 반복될 수 있도록 만들었음
# 
# 반복 구조를 만들던 중 K 값이 변하면서 my_lst.pop(K-1) 부분에 내가 원하던 인덱스가 오지 않게 됨
# >>new_K 라는 수를 새로 만들어 해결