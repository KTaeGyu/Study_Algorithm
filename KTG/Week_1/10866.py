# ----------------------------------------------------------------------------------------------------------문제
# 정수를 저장하는 덱(Deque)를 구현한 다음, 입력으로 주어지는 명령을 처리하는 프로그램을 작성하시오.

# 명령은 총 여덟 가지이다.

# push_front X: 정수 X를 덱의 앞에 넣는다.
# push_back X: 정수 X를 덱의 뒤에 넣는다.
# pop_front: 덱의 가장 앞에 있는 수를 빼고, 그 수를 출력한다. 만약, 덱에 들어있는 정수가 없는 경우에는 -1을 출력한다.
# pop_back: 덱의 가장 뒤에 있는 수를 빼고, 그 수를 출력한다. 만약, 덱에 들어있는 정수가 없는 경우에는 -1을 출력한다.
# size: 덱에 들어있는 정수의 개수를 출력한다.
# empty: 덱이 비어있으면 1을, 아니면 0을 출력한다.
# front: 덱의 가장 앞에 있는 정수를 출력한다. 만약 덱에 들어있는 정수가 없는 경우에는 -1을 출력한다.
# back: 덱의 가장 뒤에 있는 정수를 출력한다. 만약 덱에 들어있는 정수가 없는 경우에는 -1을 출력한다.

# ------------------------------------------------------------------------------------------------------예제 입력
# 첫째 줄에 주어지는 명령의 수 N (1 ≤ N ≤ 10,000)이 주어진다. 
# 둘째 줄부터 N개의 줄에는 명령이 하나씩 주어진다. 
# 주어지는 정수는 1보다 크거나 같고, 100,000보다 작거나 같다. 
# 문제에 나와있지 않은 명령이 주어지는 경우는 없다.
'''
15
push_back 1
push_front 2
front
back
size
empty
pop_front
pop_back
pop_front
size
empty
pop_back
push_front 3
empty
front
'''

# ------------------------------------------------------------------------------------------------------예제 출력
# 출력해야하는 명령이 주어질 때마다, 한 줄에 하나씩 출력한다.
'''
2
1
2
0
2
1
-1
0
1
-1
0
3
'''

# --------------------------------------------------------------------------------------------------알고리즘 분류
# 구현
# 자료 구조
# 덱

# ----------------------------------------------------------------------------------------------------------풀이
# 시간초과 해결용 리드라인
import sys
input = sys.stdin.readline

# push_front X: 정수 X를 덱의 앞에 넣는다.
def push_front(deck, X):
    deck.insert(0, X)

# push_back X: 정수 X를 덱의 뒤에 넣는다.
def push_back(deck, X):
    deck.append(X)

# pop_front: 덱의 가장 앞에 있는 수를 빼고, 그 수를 출력한다. 만약, 덱에 들어있는 정수가 없는 경우에는 -1을 출력한다.
def pop_front(deck):
    if deck == []:
        print(-1)
    else:
        ele = deck.pop(0)
        print(ele)

# pop_back: 덱의 가장 뒤에 있는 수를 빼고, 그 수를 출력한다. 만약, 덱에 들어있는 정수가 없는 경우에는 -1을 출력한다.
def pop_back(deck):
    if deck == []:
        print(-1)
    else:
        ele = deck.pop()
        print(ele)

# size: 덱에 들어있는 정수의 개수를 출력한다.
def size(deck):
    print(len(deck))

# empty: 덱이 비어있으면 1을, 아니면 0을 출력한다.
def empty(deck):
    if deck == []:
        print(1)
    else:
        print(0)

# front: 덱의 가장 앞에 있는 정수를 출력한다. 만약 덱에 들어있는 정수가 없는 경우에는 -1을 출력한다.
def front(deck):
    if deck == []:
        print(-1)
    else:
        print(deck[0])

# back: 덱의 가장 뒤에 있는 정수를 출력한다. 만약 덱에 들어있는 정수가 없는 경우에는 -1을 출력한다.
def back(deck):
    if deck == []:
        print(-1)
    else:
        print(deck[len(deck)-1])

# 테스트가 진행되는 중에 저장될 데이터 공간
B = []

# 테스트 진행
for T in range(int(input())):
    A = list(input().split())
    if A[0] == 'push_front':
        push_front(B, int(A[1]))
    if A[0] == 'push_back':
        push_back(B, int(A[1]))
    if A[0] == 'pop_front':
        pop_front(B)
    if A[0] == 'pop_back':
        pop_back(B)
    if A[0] == 'size':
        size(B)
    if A[0] == 'empty':
        empty(B)
    if A[0] == 'front':
        front(B)
    if A[0] == 'back':
        back(B)

# ------------------------------------------------------------------------------------------------------풀이 과정
# 10845번 문제와 유사하게 풀었음.